"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const fs_1 = require("fs");
const lru_cache_1 = __importDefault(require("lru-cache"));
const os_1 = __importDefault(require("os"));
const getETag = require('etag');
const moduleReadCache = new lru_cache_1.default({
    max: 10000
});
async function cachedRead(ctx, file) {
    const lastModified = (await fs_1.promises.stat(file)).mtimeMs;
    const cached = moduleReadCache.get(file);
    if (ctx) {
        ctx.set('Cache-Control', 'no-cache');
        ctx.type = path_1.default.basename(file);
    }
    if (cached && cached.lastModified === lastModified) {
        if (ctx) {
            ctx.etag = cached.etag;
            ctx.lastModified = new Date(cached.lastModified);
            if (ctx.get('If-None-Match') === ctx.etag) {
                ctx.status = 304;
            }
            // still set the content for *.vue requests
            ctx.body = cached.content;
        }
        return cached.content;
    }
    const content = await fs_1.promises.readFile(file, 'utf-8');
    const etag = getETag(content);
    moduleReadCache.set(file, {
        content,
        etag,
        lastModified
    });
    if (ctx) {
        ctx.etag = etag;
        ctx.lastModified = new Date(lastModified);
        ctx.body = content;
        ctx.status = 200;
    }
    return content;
}
exports.cachedRead = cachedRead;
function getIPv4AddressList() {
    const networkInterfaces = os_1.default.networkInterfaces();
    let result = [];
    Object.keys(networkInterfaces).forEach((key) => {
        const ips = (networkInterfaces[key] || [])
            .filter((details) => details.family === 'IPv4')
            .map((detail) => detail.address.replace('127.0.0.1', 'localhost'));
        result = result.concat(ips);
    });
    return result;
}
exports.getIPv4AddressList = getIPv4AddressList;
