"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
// built ts files are placed into /dist
exports.APP_PATH = path_1.default.join(__dirname, '../../lib/app');
// speical virtual file
exports.SITE_DATA_REQUEST_PATH = '/@siteData';
// this is a path resolver that is passed to vite
// so that we can resolve custom requests that start with /@app or /@theme
// we also need to map file paths back to their public served paths so that
// vite HMR can send the correct update notifications to the client.
function createResolver(themeDir) {
    return {
        requestToFile(publicPath) {
            if (publicPath.startsWith('/@app')) {
                return path_1.default.join(exports.APP_PATH, publicPath.replace(/^\/@app\/?/, ''));
            }
            if (publicPath.startsWith('/@theme')) {
                return path_1.default.join(themeDir, publicPath.replace(/^\/@theme\/?/, ''));
            }
            if (publicPath === exports.SITE_DATA_REQUEST_PATH) {
                return exports.SITE_DATA_REQUEST_PATH;
            }
        },
        fileToRequest(filePath) {
            if (filePath.startsWith(exports.APP_PATH)) {
                return `/@app/${path_1.default.relative(exports.APP_PATH, filePath)}`;
            }
            if (filePath.startsWith(themeDir)) {
                return `/@theme/${path_1.default.relative(themeDir, filePath)}`;
            }
            if (filePath === exports.SITE_DATA_REQUEST_PATH) {
                return exports.SITE_DATA_REQUEST_PATH;
            }
        },
        idToRequest(id) {
            if (id === 'vitepress') {
                return '/@app/exports.js';
            }
        }
    };
}
exports.createResolver = createResolver;
