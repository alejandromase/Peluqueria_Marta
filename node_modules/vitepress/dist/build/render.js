"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const fs_1 = require("fs");
const server_renderer_1 = require("@vue/server-renderer");
const escape = require('escape-html');
async function renderPage(config, page, // foo.md
result) {
    const { createApp } = require(path_1.default.join(config.tempDir, '_assets/index.js'));
    const { app, router } = createApp();
    const routePath = `/${page.replace(/\.md$/, '')}`;
    router.go(routePath);
    const content = await server_renderer_1.renderToString(app);
    const assetPath = `${config.site.base}_assets`;
    const pageJsPath = page.replace(/\//g, '_') + '.js';
    const { __pageData } = require(path_1.default.join(config.tempDir, '_assets', pageJsPath));
    const pageData = JSON.parse(__pageData);
    const html = `
<html lang="en-US">
  <head>
    <title>${pageData.title ? pageData.title + ` | ` : ``}${config.site.title}</title>
    <meta name="description" content="${config.site.description}">
    <link rel="stylesheet" href="${assetPath}/style.css">${renderHead(config.site.head)}${renderHead(pageData.frontmatter.head)}
  </head>
  <body>
    <div id="app">${content}</div>
    <script type="module" src="${assetPath}/${pageJsPath}"></script>
    <script type="module" src="${assetPath}/index.js"></script>
  </body>
</html>`.trim();
    const htmlFileName = path_1.default.join(config.outDir, page.replace(/\.md$/, '.html'));
    await fs_1.promises.mkdir(path_1.default.dirname(htmlFileName), { recursive: true });
    await fs_1.promises.writeFile(htmlFileName, html);
}
exports.renderPage = renderPage;
function renderHead(head) {
    if (!head || !head.length) {
        return '';
    }
    return (`\n    ` +
        head
            .map(([tag, attrs = {}, innerHTML = '']) => {
            const openTag = `<${tag}${renderAttrs(attrs)}>`;
            if (tag !== 'link' && tag !== 'meta') {
                return `${openTag}${innerHTML}</${tag}>`;
            }
            else {
                return openTag;
            }
        })
            .join('\n    '));
}
function renderAttrs(attrs) {
    return Object.keys(attrs)
        .map((key) => {
        return ` ${key}="${escape(attrs[key])}"`;
    })
        .join('');
}
