"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const slash_1 = __importDefault(require("slash"));
const fs_1 = require("fs");
const pathResolver_1 = require("../utils/pathResolver");
const vite_1 = require("vite");
const markdownToVue_1 = require("../markdownToVue");
// bundles the VitePress app for both client AND server.
async function bundle(config, options) {
    const root = config.root;
    const resolver = pathResolver_1.createResolver(config.themeDir);
    const markdownToVue = markdownToVue_1.createMarkdownToVueRenderFn(root);
    const { rollupInputOptions = {}, rollupOutputOptions = {} } = options;
    const VitePressPlugin = {
        name: 'vitepress',
        resolveId(id) {
            if (id.endsWith('.md.vue')) {
                return id;
            }
        },
        async load(id) {
            if (id === '/@siteData') {
                return `export default ${JSON.stringify(JSON.stringify(config.site))}`;
            }
            // compile md into vue src for .md.vue virtual files
            if (id.endsWith('.md')) {
                const filePath = id.replace(/\.vue$/, '');
                const content = await fs_1.promises.readFile(filePath, 'utf-8');
                const lastUpdated = (await fs_1.promises.stat(filePath)).mtimeMs;
                const { vueSrc } = markdownToVue(content, filePath, lastUpdated);
                return vueSrc;
            }
        },
        generateBundle(_options, bundle) {
            // for each .md entry chunk, adjust its name to its correct path.
            for (const name in bundle) {
                const chunk = bundle[name];
                if (chunk.type === 'chunk') {
                    if (chunk.isEntry &&
                        chunk.facadeModuleId &&
                        chunk.facadeModuleId.endsWith('.md')) {
                        // foo/bar.md -> _assets/foo_bar.md.js
                        chunk.fileName = path_1.default.join('_assets/', slash_1.default(path_1.default.relative(root, chunk.facadeModuleId)).replace(/\//g, '_') + '.js');
                    }
                    else {
                        chunk.fileName = path_1.default.join('_assets/', chunk.fileName);
                    }
                }
            }
        }
    };
    // convert page files to absolute paths
    const pages = config.pages.map(file => path_1.default.resolve(root, file));
    // let rollup-plugin-vue compile .md files as well
    const rollupPluginVueOptions = {
        include: /\.(vue|md)$/
    };
    const sharedOptions = {
        ...options,
        cdn: false,
        silent: true,
        resolvers: [resolver],
        srcRoots: [pathResolver_1.APP_PATH, config.themeDir],
        cssFileName: '_assets/style.css',
        rollupPluginVueOptions,
        rollupInputOptions: {
            ...rollupInputOptions,
            input: [path_1.default.resolve(pathResolver_1.APP_PATH, 'index.js'), ...pages],
            plugins: [VitePressPlugin, ...(rollupInputOptions.plugins || [])]
        },
        rollupOutputOptions: {
            ...rollupOutputOptions,
            dir: config.outDir
        },
        minify: !process.env.DEBUG
    };
    console.log('building client bundle...');
    const clientResult = await vite_1.build({
        ...sharedOptions,
        rollupOutputOptions: {
            ...rollupOutputOptions,
            dir: config.outDir
        }
    });
    console.log('building server bundle...');
    const serverResult = await vite_1.build({
        ...sharedOptions,
        rollupPluginVueOptions: {
            ...rollupPluginVueOptions,
            target: 'node'
        },
        rollupInputOptions: {
            ...sharedOptions.rollupInputOptions,
            external: ['vue', '@vue/server-renderer']
        },
        rollupOutputOptions: {
            ...rollupOutputOptions,
            dir: config.tempDir,
            format: 'cjs',
            exports: 'named'
        },
        // server build doesn't need minification
        minify: false
    });
    return [clientResult, serverResult];
}
exports.bundle = bundle;
